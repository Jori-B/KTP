#created on: Dec 30, 2019
package sheeprules

// list any import classes here.
import com.model.Model;
import com.model.Question;
import com.model.Shed;
import com.model.Materials;
import com.model.Business;
import com.model.Land;
import com.model.Care;
import com.model.Sheep;

import com.model.Main; 
//import function com.model.Utility.help;

dialect "java"

rule "Mention shed size needed"
	salience 10
	when
		Sheep( $nSheep : totalNSheepWanted > 0);
		$shed : Shed($shedSize : curShedSize, $goalSize : goalSize); 
	then
	// Converting to an int because else the thing gives lots of digits behind the dot.
		$shed.setAdvice("Rougly 2.5 meters per sheep is needed in a shed. Since you want " + $nSheep + " sheep, " +
		"your shed should be " + (int)$goalSize + " meters big");
end 

rule "Great shed" 
	when
		$shed : Shed( hasShed, goalCurSizeDiff < 0, isTallerThan3, isPathWiderThan3, hasCementFloor, hasFertilizerPlate, hasAdjustableFences, hasElectricity);
	then
		$shed.setAdvice("Your shed meets all the requirements for the amount of sheep you want.");
end

rule "Correct dimensions shed"
	when
		$shed : Shed( hasShed, goalCurSizeDiff < 0, isTallerThan3, isPathWiderThan3);
		Shed(hasCementFloor == false || hasFertilizerPlate == false || hasAdjustableFences == false || hasElectricity == false);
	then
		$shed.setAdvice("Your shed has the correct dimensions for holding the amount of sheep you want.");
end

rule "Shed is big enough, but dimensions off"
	salience 3
	when
		$shed : Shed( hasShed, goalCurSizeDiff < 0);
		Shed(isTallerThan3 == false || isPathWiderThan3 == false);
	then
		$shed.setAdvice("Your shed is big enough, but the it is not tall enough and the path is too narrow.");
end

rule "Shed not big enough and dimensions off"
	salience 3
	when
		$shed : Shed( hasShed, goalCurSizeDiff >= 0);
		Shed(isTallerThan3 == false || isPathWiderThan3 == false);
	then
		$shed.setAdvice("Your shed is not big enough, and either it is no tall enough or the path is not wide enough.");
end

rule "Shed not tall"
	salience 2
	when
		$shed : Shed( hasShed, isPathWiderThan3, isTallerThan3 == false);
	then
		$shed.setAdvice("your shed is not high enough for a tractor to go through.", true);
end

rule "Shed not wide"
	salience 2
	when
		$shed : Shed( hasShed, isPathWiderThan3 == false, isTallerThan3);
	then
		$shed.setAdvice("your shed in not wide enough for a tractor to go through. Also, space is needed to store food (and materials).", true);
end

rule "Shed not wide and tall"
	salience 2
	when
		$shed : Shed( hasShed, isPathWiderThan3 == false, isTallerThan3 == false);
	then
		$shed.setAdvice("your shed is not wide and high enough for a tractor to go through. Also, space in needed to store food (and materials).", true);
end

rule "Shed not wide, but room"
	salience 1
	when
		$shed : Shed( hasShed, isPathWiderThan3 == false, isAllowedToBuild, roomForShed > 0);
	then
		$shed.setAdvice("You could consider widening your shed or expanding your shed, since you are allowed to build.");
end

rule "Hobby, small shed, no build"
	salience 0.5
	when
		$shed : Shed( hasShed, goalCurSizeDiff > 0, isAllowedToBuild == false);
		Business(hobSemiPro == HOBBY);
	then
		$shed.setAdvice("Your shed is too small for the amount of sheep you want and you cannot build. You could consider " +
		"herding sheep that don't need a shed. Some of those only need a small shed on the land you have, like the dutch land goat ('landgeit').");
end

rule "Pro, small shed, no build"
	salience 0.5
	when
		$shed : Shed( hasShed, goalCurSizeDiff > 0, isAllowedToBuild == false);
		Business(hobSemiPro == PRO);
	then
		$shed.setAdvice("Your shed is too small for the amount of sheep you want and you aren't allowed to build. " + 
		"Therefore it is not recommended to herd sheep professionally.");
end

rule "Small shed, room for expansion"
	salience 0.5
	when
		$shed : Shed( hasShed, goalCurSizeDiff > 0, isAllowedToBuild, roomForShed >= goalCurSizeDiff);
	then
		$shed.setAdvice("Your shed is too small, but you have enough room to expand your shed. This will cost you + costBuildShed");
end

rule "Hobby, small shed, no room for expansion"
	salience 0.5
	when
		$shed : Shed( hasShed, goalCurSizeDiff > 0, isAllowedToBuild, roomForShed < goalCurSizeDiff);
		Business(hobSemiPro == HOBBY);
	then
		$shed.setAdvice("Your shed is too small for the amount of sheep you want and you don't have enough room to expand. " + 
		"You could consider herding sheep that don't need a shed or herding less sheep. Some of those only need a small shed " +
		"on the land you have, like the Soay.");
end

rule "Pro, small shed, not enough room for expansion"
	salience 0.5
	when
		$shed : Shed( hasShed, goalCurSizeDiff > 0, isAllowedToBuild, roomForShed < goalCurSizeDiff);
		Business(hobSemiPro == PRO);
	then
		// Maybe before saying it is worth doing it semi professionally we should look at the data
		$shed.setAdvice("Your shed is too small for the amount of sheep you want and you do not have enough room to expand to house the preferred amount of sheep. " + 
		"Therefore it is not recommended to sheep herd professionally. It might be worth considering doing it semi " + 
		"professionally with fewer sheep");
end

rule "Hobby, no shed, little room"
	salience 0.5
	when
		$shed : Shed( hasShed == false, goalCurSizeDiff > 0, isAllowedToBuild, roomForShed < goalCurSizeDiff);
		Business(hobSemiPro == HOBBY);
	then
		// advice says land you have but might not have land
		$shed.setAdvice("You don't have enough room to build a shed for the amount of sheep you want. You could consider " + 
		"herding sheep that don't need a shed or herding less sheep. Some of those only need a small shed on the land you have.");
end

rule "Pro, no shed, little room"
	salience 0.5
	when
		$shed : Shed( hasShed == false, goalCurSizeDiff > 0, isAllowedToBuild, roomForShed < goalCurSizeDiff);
		Business(hobSemiPro == PRO);
	then
		$shed.setAdvice("You don't have enough room to build a shed for the amount of sheep you want. Therefore it is not recommended " + 
		"to sheep herd professionally. It might be worth considering doing it semi professionally with fewer sheep");
end

rule "Explain Calculations ShedCost"
	salience 0.3
	when 
		 Cost($shedCost : shedCost > 0);
		 $shed : Shed();
	then 
		$shed.setAdvice("Building a shed costs 350.- euros per square meter. "+
		" Rougly half of the cost is for the construction of the shed, quarter for installing the electrical system and  another quarter for installing the water system. "+
		"This means that it will cost you "+ (int)$shedCost + ".- euros in total, from witch around "+ (int)$shedCost/2 +".- euros for installing water and electricity");
end

rule "No flat floor"
	when
		$shed : Shed( hasShed, hasCementFloor == false);
	then
		$shed.setAdvice("The floor in your shed is not flat. A flat cement floor is recommended");
end

rule "No fertilizer plate"
	when
		$shed : Shed( hasShed, hasFertilizerPlate == false);
	then
		$shed.setAdvice("A mest plate is needed for not letting the defecation get below the shed floor. Such a plate costs roughly 20.000 euro");
end

rule "No electricity"
	when
		$shed : Shed( hasShed, hasElectricity == false);
	then
		$shed.setAdvice("When the birthing takes place, lambs need light the entire night. So you should buy some lamps.");
end

rule "No adj fences"
	salience -0.5
	when
		$shed : Shed( hasShed, hasAdjustableFences == false);
	then
		$shed.setAdvice("Movable fences are handy for separating sheep in the shed when they have lambs. This is also handy for administration purposes.");
end

rule "Explain Calculations adjustableFenceCost"
	salience -1 
	when 
		$cost : Cost(adjustableFenceCost > 0);
		$shed : Shed();
	then
		$shed.setAdvice("One movable fence costs 50.- euros. You need roughly 2 fences per sheep, but since half of your sheep enter the shed "+
		" at the same time you need to spend only 50.- euros per sheep for the fences. "+
		"This means that fences will cost you "+ (int)$cost.adjustableFenceCost + ".- euros in total");
end

rule "No eating fences"
	salience -1.5
	when
		$shed : Shed( hasShed, hasEatingFences == false);
	then
		$shed.setAdvice("Of course, sheep need to eat when they are in the shed. The most convenient way is eating fences.");
end

rule "Explain Calculations eatingFenceCost"
	salience -2
	when 
		$cost : Cost(eatingFenceCost > 0);
		$shed : Shed();
	then
		$shed.setAdvice("Eating fences cost 90.- euros per meter. They have to be on both sides of the path. " +
		"The goal lenght of your shed is " + (int)$shed.getLengthGoal() + " so you need " +
		(int)$cost.getLengthEat() + " meters of eating fences. "+
		"This means that eating fences will cost you "+ (int)$cost.eatingFenceCost+ ".- euros in total");
end
