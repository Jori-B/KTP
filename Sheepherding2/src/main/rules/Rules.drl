#created on: Dec 7, 2019
package sheeprules

// list any import classes here.
import com.model.Model;
import com.model.Question;
import com.model.Shed;
import com.model.Materials;
import com.model.Business;
import com.model.Land;
import com.model.Care;
import com.model.Sheep;

import com.model.Main; 
import function com.model.Utility.help;

dialect "java"

// Second order questions, which need to be asked using the Question class. 
rule "Wants more than 10 sheep"
	when
		Question(Question.Name == "Number of Sheep", answer > 10);
		kvk : Question(Question.Name =="isKVKRegistered", askNow == false); 
	then
		help(drools,"he wants to be a pro");
		modify(kvk) { askQuestion(true) }
end

// Sometimes the user goes back to the previous questions and changes the answer, therefore the rule model needs
// to take into account that this second order questions aren't asked then!
rule "Wants more than 10 sheep changed"
	when
		Question(Question.Name == "Number of Sheep", answer < 10);
		kvk : Question(Question.Name =="isKVKRegistered", askNow == true); 
	then
		help(drools,"he has changed wanting more than 10 sheep");
		modify(kvk) { setAskNow(false) }
end

rule "Has land"
	when
	// status is a variable that's not yet used, but I thought it might be useful to have such a variable to prevent rules from firing twice...
		land : Question(Question.Name == "Has Land", answer == YES);
		nmLandSize : Question(Question.Name == "Land Size", askNow == false);
		toeslagrechten : Question(Question.Name == "toeslagrechten");
	then
		help(drools,"info");
		modify(nmLandSize) { askQuestion(true) }
		modify(toeslagrechten) { askQuestion(true) }
		//gvalues.addAvailableLand(nmLandSize.getAnswer());	
end

rule "Has land has changed"
	when
		land : Question(Question.Name == "Has Land", answer == NO);
		nmLandSize : Question(Question.Name == "Land Size", askNow == true);
		toeslagrechten : Question(Question.Name == "toeslagrechten");
	then
		help(drools,"info");
		modify(nmLandSize) { setAskNow(false) }
		modify(toeslagrechten) { setAskNow(false) }
end

rule "Has leased land"
	when
		land : Question(Question.Name == "hasLeasedLand", answer == YES);
		nmLandSize : Question(Question.Name == "leasedLandSize", askNow == false);
	then
		help(drools,"info");
		modify(nmLandSize) { askQuestion(true) }
end

rule "Has leased land has changed"
	when
		land : Question(Question.Name == "hasLeasedLand", answer == NO);
		nmLandSize : Question(Question.Name == "leasedLandSize", askNow == true);
	then
		help(drools,"info");
		modify(nmLandSize) { setAskNow(false) }
end

// Only if someone is UBN registered can he have any sheep
rule "Is UBN registered"
	when
		isUBNRegistered : Question(Question.Name == "isUBNRegistered", answer == YES);
		hasSheep : Question(Question.Name =="hasSheep", askNow == false); 
	then
		help(drools,"he is UBN regis");
		modify(hasSheep) { askQuestion(true) }
end

rule "Is UBN registered changed changed"
	when
		isUBNRegistered : Question(Question.Name == "isUBNRegistered", answer == NO);
		hasSheep : Question(Question.Name =="hasSheep", askNow == true); 
		nSheepOwned : Question(Question.Name =="ownsNSheep"); 
	then
		help(drools,"he has changed having a sheep");
		modify(hasSheep) { setAskNow(false) }
		modify(hasSheep) { setAnswer(0) } // set answer to zero to prevent firing of "Has sheep"
		modify(nSheepOwned) { setAskNow(false) }
end

rule "Has sheep"
	when
		ownsSheep : Question(Question.Name == "hasSheep", answer == YES);
		nSheepOwned : Question(Question.Name =="ownsNSheep", askNow == false); 
	then
		help(drools,"he has sheep");
		modify(nSheepOwned) { askQuestion(true) }
end

rule "Has sheep changed"
	when
		ownsSheep : Question(Question.Name == "hasSheep", answer == NO);
		nSheepOwned : Question(Question.Name =="ownsNSheep", askNow == true); 
	then
		help(drools,"he has changed having a sheep");
		modify(nSheepOwned) { setAskNow(false) }
end

rule "Has shed"
	when
		ownsShed : Question(Question.Name == "Has Shed", answer == YES);
		nmShedSize: Question(Question.Name =="Shed Size", askNow == false); 

        heightShed: Question(Question.Name == "heightShed"); 
        pathWidthShed: Question(Question.Name == "pathWidthShed");
        hasFertilizer: Question(Question.Name == "hasFertilizer"); 
        hasAdjustableFences : Question(Question.Name == "hasAdjustableFences"); 
    	hasFlatFloor: Question(Question.Name == "hasFlatFloor");
    	hasElectricity: Question(Question.Name == "hasElectricity");
	then
		help(drools,"he has a shed");
		modify(nmShedSize) { askQuestion(true) }
		modify(heightShed) { askQuestion(true) } 
        modify(pathWidthShed) { askQuestion(true) }
        modify(hasFertilizer) { askQuestion(true) }
        modify(hasAdjustableFences) { askQuestion(true) }
    	modify(hasFlatFloor) { askQuestion(true) }
    	modify(hasElectricity) { askQuestion(true) }
end

rule "Has shed changed"
	when
		ownsShed : Question(Question.Name == "Has Shed", answer == NO);
		nmShedSize: Question(Question.Name =="Shed Size", askNow == true);
		
		heightShed: Question(Question.Name == "heightShed"); 
        pathWidthShed: Question(Question.Name == "pathWidthShed");
        hasFertilizer: Question(Question.Name == "hasFertilizer"); 
    	hasFlatFloor: Question(Question.Name == "hasFlatFloor");
    	hasElectricity: Question(Question.Name == "hasElectricity");
	then
		help(drools,"he has changed having a shed");
		modify(nmShedSize) { setAskNow(false) }
		modify(heightShed) { setAskNow(false) } 
        modify(pathWidthShed) { setAskNow(false) }
        modify(hasFertilizer) { setAskNow(false) }
    	modify(hasFlatFloor) { setAskNow(false) }
    	modify(hasElectricity) { setAskNow(false) }
		// MAYBE THE SHEDSIZE ANSWER SHOULD BE SET TO 0 AS WELL???
end

rule "Calc shed room for sheep when path size is available (path bigger than 3m)"
	salience 2
	when
		Question(Question.Name == "pathWidthShed", $pathWidth : answer >= 3);
		$nmShedSize : Question(Question.Name =="Shed Size", $totalSize : answer > 0, isModified == false);
		Question(Question.Name == "shedLength", $lengthShed : answer > 0);
	then
		// true shed size for the sheep room is minus the path (always assuming the path is in the length of shed)
		modify($nmShedSize) { setAnswer(($totalSize - (int)($lengthShed * $pathWidth))) }
		// ISsmodified is used so the rule doesnt fire multiple times
		modify($nmShedSize) { setIsModified(true) }
		help(drools,"calculation shed minus path size");
end

rule "Calc shed room for sheep when path size is available (path smaller than 3m)"
	salience 2
	when
		Question(Question.Name == "pathWidthShed", answer < 3, status == HASANSWER);
		$nmShedSize : Question(Question.Name =="Shed Size", $totalSize : answer > 0, isModified == false);
		Question(Question.Name == "shedLength", $lengthShed : answer > 0);
	then
		// true shed size for the sheep room is minus the path (always assuming the path is in the length of shed)
		// path width needs to be at least 3m so we subtract this
		modify($nmShedSize) { setAnswer(($totalSize - (int)($lengthShed * 3))) }
		// ISsmodified is used so the rule doesnt fire multiple times
		modify($nmShedSize) { setIsModified(true) }
		help(drools,"calculation shed minus path size");
end

rule "Calc goal current shed size difference"
	salience 1
	when
		Question(Question.Name == "pathWidthShed", status == HASANSWER);
		Question(Question.Name == "Number of Sheep", $nSheep : answer > 0);
		$nmShedSize: Question(Question.Name =="Shed Size", isModified);
		Question(Question.Name == "shedLength", answer > 0);
	then 
		insert (new Question("goalSize", $nSheep * 2.5));
		help(drools,"calculating shed goal size");
		
end

rule "Shed too small" 
	when
		Question(Question.Name == "pathWidthShed", status == HASANSWER);
		(Question(Question.Name == "Shed Size", $curSize : answer, isModified) and Question(Question.Name == "goalSize", answer > $curSize)) or Question(Question.Name == "Has Shed", answer == NO);
		isAllowedToBuild : Question(Question.Name == "isAllowedToBuild", askNow == false);
		roomForShed : Question(Question.Name == "roomForShed", askNow == false);
	then
		help(drools,"it recognizes shed too small");
		modify(isAllowedToBuild) { askQuestion(true) }
		
end // THERE SHOULD ALSO BE A RULE FOR WHEN THE USER CHANGES HIS ANSWERS, i.e. when goalSize changed

// The only third order question so far
rule "Is allowed to build, ask how much room there is to build"
	when
		Question(Question.Name == "isAllowedToBuild", answer == YES);
		roomForShed : Question(Question.Name == "roomForShed", askNow == false);
	then	
		modify(roomForShed) { askQuestion(true) }
end

rule "Is allowed to build changed"
	when
		Question(Question.Name == "isAllowedToBuild", answer == NO);
		roomForShed : Question(Question.Name == "roomForShed", askNow == true);
	then	
		modify(roomForShed) { setAskNow(false) }
end

rule "Has tractor, ask horsepower"
	when
		hasTractor : Question(Question.Name == "Has Tractor", answer == YES);
		horsePowerTractor : Question(Question.Name =="horsePowerTractor", askNow == false); 
	then
		help(drools,"he has tractor");
		modify(horsePowerTractor) { askQuestion(true) }
end

rule "Has tractor changed"
	when
		hasTractor : Question(Question.Name == "Has Tractor", answer == NO);
		horsePowerTractor : Question(Question.Name =="horsePowerTractor", askNow == true); 
	then
		help(drools,"he has changed having a tractor");
		modify(horsePowerTractor) { setAskNow(false) }
end

// Probably needs to be adjusted to include the amount of owned sheep
rule "Amount of sheep changed bigger than 10, ask machine questions"
	when
		nSheep : Question(Question.Name =="Number of Sheep", answer > 10); 
		
		hasShaker : Question(Question.Name == "hasShaker", askNow == false);
		hasRaker : Question(Question.Name == "hasRaker", askNow == false);
		hasMower : Question(Question.Name == "hasMower", askNow == false);
		hasMestGatherer : Question(Question.Name == "hasMestGatherer", askNow == false);
		hasHayPacker : Question(Question.Name == "hasHayPacker", askNow == false);
		hasFertilizerSpreader : Question(Question.Name == "hasFertilizerSpreader", askNow == false);
	then
		help(drools,"don't ask machine q's");
		modify(hasShaker) { askQuestion(true) }
		modify(hasRaker) { askQuestion(true) }
		modify(hasMower) { askQuestion(true) }
		modify(hasMestGatherer) { askQuestion(true) }
		modify(hasHayPacker) { askQuestion(true) }
		modify(hasFertilizerSpreader) { askQuestion(true) }
		
end

rule "Amount of sheep changed, don't ask machine questions"
	when
		nSheep : Question(Question.Name =="Number of Sheep", answer < 10); 
		
		hasShaker : Question(Question.Name == "hasShaker", askNow == true);
		hasRaker : Question(Question.Name == "hasRaker", askNow == true);
		hasMower : Question(Question.Name == "hasMower", askNow == true);
		hasMestGatherer : Question(Question.Name == "hasMestGatherer", askNow == true);
		hasHayPacker : Question(Question.Name == "hasHayPacker", askNow == true);
		hasFertilizerSpreader : Question(Question.Name == "hasFertilizerSpreader", askNow == true);
	then
		help(drools,"don't ask machine q's");
		modify(hasShaker) { setAskNow(false) }
		modify(hasRaker) { setAskNow(false) }
		modify(hasMower) { setAskNow(false) }
		modify(hasMestGatherer) { setAskNow(false) }
		modify(hasHayPacker) { setAskNow(false) }
		modify(hasFertilizerSpreader) { setAskNow(false) }
		
end

rule "Wants lambs"
	when
		wantsLambs : Question(Question.Name == "wantsLambs", answer == YES);
		selfBirth : Question(Question.Name =="Self Birth", askNow == false); 
	then
		help(drools,"He wants lambs");
		modify(selfBirth) { askQuestion(true) }
end

rule "Wants lambs changed"
	when
		wantsLambs : Question(Question.Name == "wantsLambs", answer == NO);
		selfBirth : Question(Question.Name =="Self Birth", askNow == true); 
	then
		help(drools,"he has changed wanting lambs");
		modify(selfBirth) { setAskNow(false) }
end

rule "All questions asked, enter all answers"
	// salience is automatically set at 0
	salience 20
	when
		$model : Model(allQuestionsAsked == true);
	then 
		$model.setAllAnswers();
end

// Sheep needs to have more salience than land, care and shed so that the functions for that can be used
// numberOfSheepMore needs to be calculated after inserting land (so modify)
rule "All questions asked, sheep calculations"
	// salience is automatically set at 0
	salience 10
	when
		Model(allQuestionsAsked == true, $sheep : getSheep());
	then 
		$sheep.calcPriceSheep();
		//$sheep.calcPhosphateRights();
		insert( $sheep );
end

rule "All questions asked, land calculations"
	salience 9
	when
		Model(allQuestionsAsked == true, $land : getLand(), $sheep : getSheep());
	then 
		
		$land.calcLandSize();
		$land.calcLandNeeded( $sheep.getTotalNSheepWanted() );
		$land.calcCostLandNeeded();
		insert( $land );
		// I think this modify works, but it needs to be tested
		modify( $sheep ) { calcNumberOfSheepMore($land.getTotalLandSize()) };
end

rule "All questions asked, care calculations"
	salience 8
	when
		Model(allQuestionsAsked == true, $care : getCare(), $shed : getShed(), $materials : getMaterials());
		Sheep( $nSheep : totalNSheepWanted );
	then 
		$care.calcShaveOtherCost($nSheep);	
		$care.calcWoolEarning($nSheep);
		insert($care);
		
		$shed.calcGoalSize($nSheep);
		$shed.calcGoalCurSizeDiff();
		insert($shed);
		
		$materials.setNeedsBigTractor($nSheep);
		insert($materials);
end


// When all questions are asked we insert the classes that hold the answers      
rule "All questions asked"
	salience 1
	when
		model : Model(allQuestionsAsked == true, $business : getBusiness());
	then 
		//advice(model.getSheep().getSheepCost());
		help(drools, "all q asked, sheep, land, care, shed inserted");
		model.enterCosts();
		insert($business);
		
		model.giveAdviceAndTable();
end 





		
		
		